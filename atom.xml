<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KeLing</title>
  
  
  <link href="/bear.github.io/atom.xml" rel="self"/>
  
  <link href="https://scau009.github.io/"/>
  <updated>2020-04-03T14:48:00.473Z</updated>
  <id>https://scau009.github.io/</id>
  
  <author>
    <name>春天的熊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>到底什么是 RPC</title>
    <link href="https://scau009.github.io/2020/04/03/RPC/"/>
    <id>https://scau009.github.io/2020/04/03/RPC/</id>
    <published>2020-04-03T14:08:09.000Z</published>
    <updated>2020-04-03T14:48:00.473Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个项目，还是老配方，用 PHP。常年后端提供接口，直接 HTTP接口请求（RESTfull或者其他格式）就能搞定了。<br>但是技术大佬让我用 JWT 和 JSON-RPC 规范来实现。</p><p>JWT倒没啥没问题，就是个认证规范。但是我还是喜欢access_token签名验证。这里暂且不表。</p><p>至于 JSON-RPC？这不是就是个协议吗？为什么前端调用接口的时候希望要遵循这个协议来调用接口呢？<br>主要是出于分布式系统的考虑，可以达到解耦的目的。同时在重构代码时候前端调用对路由没有感知。<br>常规的 api 接口通常是 /api/{控制器名称}/{action 名称}?params={参数},而用上JSON-RPC 协议后，前端对路由不再关心，<br>只需要根据规范，更改方法名和参数即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"method"</span>: <span class="string">"someMethod"</span>, </span><br><span class="line">    <span class="string">"params"</span>: &#123;</span><br><span class="line">        <span class="string">"arg"</span>: &#123;<span class="string">"aProperty"</span>: <span class="number">123</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当后端改架构或者重构代码的时候，前端不需要更改路由，非常友好。</p><p>第二个就是可以复用代码，对于分布式系统，这个接口还可以复用给第三者服务器，也是按照上面的规范调用即可。</p><p>分析完之后，我马上开始撸代码。我第一反应就是先 Packagist 找现成的库。但是库要么依赖太多，要么装不上。<br>再我等待的时候，我就想想明白了。我完全不需要找库啊，逻辑其实非常更简单。</p><p>如果把这个问题比喻成经典的大象问题，是一个道理的。<br>如何把大象放到冰箱里面？</p><p>1.打开冰箱</p><p>2.把大象放进去</p><p>3.把冰箱关上</p><p>同样的，不管你用什么协议，最终我都是要拿到接口返回的数据</p><p>那么这个问题就可以这么解决</p><p>1.接收客户端 POST请求</p><p>2.解析 POST 的 JSON-RPC 协议内容</p><p>3.映射到具体function 进行逻辑运算</p><p>4.返回接口数据</p><p>1，2 和 4 没什么好说的，那么3 这个问题呢？</p><p>其实3 这个问题不就是个各个 PHP框架，所谓路由干的事情吗？</p><p>没错！就是反射！根据路由调用控制器调用方法再返回数据</p><p>同理，我们根据协议的 method 字段来映射一个类的 function，然后返回数据不就可以了？</p><p>那么做映射，主要有两种方法，一是维护一个 hasMap 来直接映射Class,二 是根据反射来实现</p><p>第一个方法有个缺点，就是维护一个 hasMap 最终肯定会很长，并且你要跟对方约定你暴露了什么方法出去，有点就是简单并且可控</p><p>第二个方法虽然免去了维护的功夫，但是对于不想暴露出去的方法就不好控制，可能有意无意地方法就被远程调用了</p><p>最后我是选用个第一种方法来应付需求，毕竟我只是单机。</p><p>这不就是高大上的微服务架构吗？<br>其实说到这里，奇怪的知识增加了！这不就是那个高大上服务注册于服务发现吗？<br>没错！~这就是微服务架构的开始，微服务架构的诞生就是为了解决单机已经满足不了业务需求的瓶颈</p><p>如果是多机分布式系统，那么每个服务器自己维护的服务列表那不是个噩梦吗？</p><p>这个时候又来验证计算机领域的一句话：没有什么问题是加一个中间件解决不了的</p><p>consul 这个组件应运而生，consul是干嘛的？</p><p>现在被广泛应用于解决服务发现和服务注册问题，我还没有具体实战经验，只是简单的了解</p><p>话说回来，单机架构有必要遵循 JSON-RPC规范给前端接口吗？我个人认为，好处是有的，但是对于单机系统不大。只有在分布式系统中才体现 RPC的价值，<br>当然，如果改造成本不大的话，现在改用这个规范对以后业务增长重构或服务拆分可以留有余力</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个项目，还是老配方，用 PHP。常年后端提供接口，直接 HTTP接口请求（RESTfull或者其他格式）就能搞定了。&lt;br&gt;但是技术大佬让我用 JWT 和 JSON-RPC 规范来实现。&lt;/p&gt;
&lt;p&gt;JWT倒没啥没问题，就是个认证规范。但是我还是喜欢access
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MySQL 索引顺序</title>
    <link href="https://scau009.github.io/2020/03/25/mysql-03-25/"/>
    <id>https://scau009.github.io/2020/03/25/mysql-03-25/</id>
    <published>2020-03-25T01:04:44.000Z</published>
    <updated>2020-03-25T01:31:03.415Z</updated>
    
    <content type="html"><![CDATA[<p>假设一个数据表people的 schema 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE people(</span><br><span class="line">    last_name varchar(40) not null,</span><br><span class="line">    first_name varchar(30) not null,</span><br><span class="line">    dob date not null,</span><br><span class="line">    gender enum(&#39;m&#39;,f) not null,</span><br><span class="line">    key(last_name,first_name,dob)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>people 表创建了一个索引，索引包括三列，分别是last_name,first_name,dob<br>对于以下情况的搜索索引生效：</p><ol><li>全值匹配（也就是索引的所有列都用上，精确匹配）</li><li>匹配最左前缀（只用上索引的最左侧的列，上面例子是 last_name,精确匹配）</li><li>匹配列前缀（只用上索引的最左侧的列，上面例子是 last_name,模糊匹配，比喻以 K开头的 last_name）</li><li>匹配范围值（只用上索引的最左侧的列，上面例子是 last_name，模糊匹配，范围查询）</li><li>精确匹配某一列并且范围匹配另外一列（只用上索引的最左侧的两列，上面例子是 last_name 和 first_name）</li><li>只访问索引的查询</li></ol><p>对于以下情况索引不生效</p><ol><li>如果不是按照索引的最左列开始查找，则无法使用索引。（也就是说查询时不能只用 first_name，因为 first_name 不是最左侧的索引列，这时候索引不生效）</li><li>不能跳过索引中的列。（也就是说，使用 last_name 和 dob 列查询时候，索引与预期不一致，会变成使用第一列即 last_name ）</li><li>如果查询中有某个列的范围查询，则右边所有列都无法使用索引(举个例子，Where last_name=’jobn’ and fist_name like ‘J%’ and dob=’2010-10-01’，这个查询只用到索引的前两列，dob 列没起作用)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设一个数据表people的 schema 如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://scau009.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://scau009.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://scau009.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度O(log n)到底是什么</title>
    <link href="https://scau009.github.io/2020/03/16/alogrithm-03-16-1/"/>
    <id>https://scau009.github.io/2020/03/16/alogrithm-03-16-1/</id>
    <published>2020-03-16T01:51:34.000Z</published>
    <updated>2020-03-16T03:10:37.339Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，时间复杂性，又称时间复杂度，算法的时间复杂度是一个函数，它定性描述该算法的运行时间</p><p>O(1)表示一次操作即可直接取得目标元素（比如字典或哈希表）</p><p>O(n) 意味着先要检查 n 个元素来搜索目标，但是 O(log n) 是什么意思呢？</p><p>第一次听说 O(log n) 时间复杂度可能是在学二分搜索算法的时候。二分搜索一定有某种行为使其时间复杂度为 log n。我们来看看是二分搜索是如何实现的。</p><p>因为在最好情况下二分搜索的时间复杂度是 O(1)，最坏情况（平均情况）下 O(log n)，我们直接来看最坏情况下的例子。已知有 16 个元素的有序数组。<br>举个最坏情况的例子，比如我们要找的是数字 13。</p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145317168-568192938.png" alt="pic"></p><p>选中间的元素作为中心点16（长度的一半）得出下图的，13 小于中心点，所以不用考虑数组的后一半</p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145331501-1550497361.png" alt="pci2"></p><p>重复这个过程，每次都寻找子数组的中间元素</p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145346056-476935969.png" alt="pci3"></p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145359244-1921372016.png" alt="pic4"></p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145408483-485222461.png" alt="pic5"></p><p>每次和中间元素比较都会使搜索范围减半。</p><p>所以为了从 16 个元素中找到目标元素，我们需要把数组平均分割 4 次，也就是说，</p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145420714-1783776406.png" alt="pic6"></p><p>简化后的公式</p><p>类似的，如果有 n 个元素，</p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145434781-1466810425.png" alt="pic7"></p><p>归纳变形得出</p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145523244-1702835266.png" alt="pic8"></p><p>从结果上来看，可以用【对数】表达式来表示上面的式子，<br>也就是说可以写成这种形式</p><p><img src="/bear.github.io/2020/03/16/alogrithm-03-16-1/338869-20190508145537164-1213998548.png" alt="pci8"></p><p>这个 K 不正是我们二分查找的次数吗？2 的 K 次方等于 N</p><p>所以 log n 的确是有意义的，不是吗？没有其他什么可以表示这种行为.</p><h3 id="那么问题来了，为什么不是-O-log-n-不写底数-2-呢？"><a href="#那么问题来了，为什么不是-O-log-n-不写底数-2-呢？" class="headerlink" title="那么问题来了，为什么不是 O(log n)不写底数 2 呢？"></a>那么问题来了，为什么不是 O(log n)不写底数 2 呢？</h3><blockquote><p>其实这里的底数对于研究程序运行效率不重要，写代码时要考虑的是数据规模n对程序运行效率的影响，常数部分则忽略，同样的，如果不同时间复杂度的倍数关系为常数，那也可以近似认为两者为同一量级的时间复杂度。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在计算机科学中，时间复杂性，又称时间复杂度，算法的时间复杂度是一个函数，它定性描述该算法的运行时间&lt;/p&gt;
&lt;p&gt;O(1)表示一次操作即可直接取得目标元素（比如字典或哈希表）&lt;/p&gt;
&lt;p&gt;O(n) 意味着先要检查 n 个元素来搜索目标，但是 O(log n) 是什么意思呢
      
    
    </summary>
    
    
    
      <category term="algorithm" scheme="https://scau009.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>MySQL优化——缓存表与汇总表</title>
    <link href="https://scau009.github.io/2020/03/13/mysql-03-13/"/>
    <id>https://scau009.github.io/2020/03/13/mysql-03-13/</id>
    <published>2020-03-13T11:52:19.000Z</published>
    <updated>2020-03-13T11:54:03.312Z</updated>
    
    <content type="html"><![CDATA[<p>提高数据库性能的有效办法之一就是建立缓存表和汇总表。</p><p>汇总表的好处是统计变得简单，对需要频繁统计的表插入性能进行了大大的提高。当一个业务频繁的电商网站需要统计近24小时的订单总数时，建立定时任务，每小时统计订单数量插入到汇总表里，然后累加24小时的记录总和，这样对数据库的开销变得非常小，查询也变得简单。不好的之处是，统计得来的数据有一定延时性，如果非要实时统计订单数量，我们累加前23小时的数据总和，在累加最近一段时间订单表的总和，这样也比实时统计总订单表总24小时的数量要好的多。因为实时计算统计是非常昂贵的操作，需要扫描表中的大部分数据非常耗时，而进行此操作时对update操作是有影响的，通常进行统计时都是表级锁。</p><p>缓存表则相反，对查询和检索的性能带来了大大的提升。假如一张表需要非常复杂的索引来进行检索，但是通常插入数据的时候会重建该表的索引，当我们数据非常庞大的时候发现，查询的时候非常慢，似乎索引没有生效，这一定是数据库对该表进行了插入操作。解决该问题的办法，就是建立一张缓存表来存储该数据表，在缓存表的上面建立复杂的索引，更新表上不建立索引。值得注意的是，我们的缓存表完全可以是业务表的一部分列，供检索使用就可以了。缺点也是有的，因为缓存数据不是最新业务数据，最新的业务数据可能查询不出来，</p><p>使用缓存表和混总表时，必须决定时定期重建还是定期维护，哪个更好取决于业务。当时定期重建会节省资源，同时保持表不会有很多碎片，以及有完全顺序组织的索引（高效）。</p><p>重建时，需要保证数据在操作时依然可用，需要把重建的数据保存到cache_new表里面，然后建完之后把cache表变为cache_old,cache_new变为cache表。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;提高数据库性能的有效办法之一就是建立缓存表和汇总表。&lt;/p&gt;
&lt;p&gt;汇总表的好处是统计变得简单，对需要频繁统计的表插入性能进行了大大的提高。当一个业务频繁的电商网站需要统计近24小时的订单总数时，建立定时任务，每小时统计订单数量插入到汇总表里，然后累加24小时的记录总和，这
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://scau009.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://scau009.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://scau009.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL并发控制以及事务概念</title>
    <link href="https://scau009.github.io/2020/03/09/mysql-03-09/"/>
    <id>https://scau009.github.io/2020/03/09/mysql-03-09/</id>
    <published>2020-03-09T14:36:49.000Z</published>
    <updated>2020-03-09T15:46:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，数据库中并发的概念很简单。举个简单的例子，当两个进程在同一时刻对同一个数据表进行操作，这种情形就是并发。<br>并发会带来什么问题呢？最显而易见的就是数据的不一致性，导致很严重的数据错误，业务受损。<br>MySQL 作为成熟的数据库软件，有成熟的并发控制，下面根据《高性能 MySQL》做总结。</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>为了解决并发问题，常用加锁方案来解决。而在数据库或者软件开发中最主要的操作就是读，写这两个。而解决并发控制通常也是实现由两种类型的锁组成更多锁系统来<br>解决并发控制问题。也就是要说到的共享锁（也可以叫做读锁，shared lock）以及排它锁（也可以称作写锁 exclusive lock）。</p><hr><p>下面解释锁的概念：</p><p>共享锁，顾名思义共享，各个进程相互不堵塞，也就是说多个进程可以同时获取同一个资源，互不干扰。</p><p>排它锁，顾名思义排他，也就是说只要有一个进程拿到了排它锁，将会堵塞其他进程，其他进程不能获取该资源的共享锁和排他锁，也就是说只有一个进程能够操作这个资源</p><h3 id="锁的粒度"><a href="#锁的粒度" class="headerlink" title="锁的粒度"></a>锁的粒度</h3><p>所谓锁粒度，其实是加锁策略的一个子概念，是在加锁的开销和数据的安全性中寻求平衡得出的概念。<br>数据库的锁的粒度分为行锁，以及表锁</p><p>表锁会锁定整张数据表，进程要对表进行操作必须获取锁，其他进程无法操作该表<br>行级锁的粒度小，只对进程操作的特定行加锁，其他进程也无法对该行进行操作，这样大大提高了数据库的并发效率</p><h3 id="事务的-ACID"><a href="#事务的-ACID" class="headerlink" title="事务的 ACID"></a>事务的 ACID</h3><p>A 即 atomicity 原子性，一个事务必须被视为一个不可分割的最小工作单元，整个事务中所有操作要么全部成功要么全部失败回滚，不可能出现只执行一部分的情况</p><p>C 即 consistency 一致性，数据库总是从一个一致性的状态转换到另外一个一致性的状态，前面的原子性是一致性的基础</p><p>I 即 isolation 隔离性，事务在未提交的时候通常对于其他事务或查询是不可见的（注意通常，这与下文提到的隔离级别有联系）</p><p>D 即 durability 持久性，事务一旦提交了，就会保存到数据库中。数据库的状态完成了从一个一致性状态转换到另一个一致性状态的结果并保持下来。</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>所谓隔离级别是上文中事务的隔离性的子概念。MySQL定义了四种隔离级别，分别是：</p><ol><li>未提交度 READ UNCOMMITTED 也就是说，即使没有提交事务，对于其他进程和事务，该事务中的数据都可读，这就是脏读。实际应用一把很少适用</li><li>提交读 READ COMMITTED  也就是说，对于已经提交的事务，其他进程和事务可以看到。但是这样会有一个问题，在一个事务中，执行相同的两次查询有可能会得<br>到不一样的结果，有可能第二次查询会其他事务修改后的结果</li><li>可重复读 REPEATABLE READ 这个级别在保证了同一个事务的同样的查询的结果是一致的，但是还是未能解决幻读的问题。幻读是说在某个事务在读取某个范围的<br>记录时，另一个事务又在这个范围内插入了新的记录行，这导致了事务再次查询的时候会出现幻行。这个问题的解决要在后面的 MVCC 中解决</li><li>可串行化 最高级别的隔离，能够避免幻读，也就是在读取的每一行都加上锁，这导致并发性能过差。</li></ol><h3 id="MVCC-多版本并发控制的原理"><a href="#MVCC-多版本并发控制的原理" class="headerlink" title="MVCC 多版本并发控制的原理"></a>MVCC 多版本并发控制的原理</h3><p>MVCC 可以认为是简单行级锁的变种，他在很多情况下利用其他方式减少加锁操作，提高并发性能<br>MVCC 引如了快照的概念。在开启事务的时候时刻对数据进行快照，也就是保存一份数据。<br>不管你事务运行多久，在改事务中数据是不会改的。不同时候开启的事务，看到的数据不一样。</p><p>InnoDB 的 MVCC的工作原理是在每行的记录保持两个隐藏的列（字段），一个是保持行的创建时间，一个保持行的过期时间。<br>上面所述的创建时间和过期时间都不是用时间戳来记录，而是用数据库系统版本号来存储。数据库系统版本号也就是数据库维护的一个自增版本号。<br>每开始一个新的事务，系统版本号都会自动的递增。对于以下主要操作，MVCC 是这样操作的</p><ol><li>SELECT InnoDB 会查询满足以下两个条件的行记录：1）行的创建版本号小于或等于当前系统版本号的。<br>2）行的删除版本号要么未定义要么大于当前系统的版本号</li></ol><p>以上两个翻译一下就是，事务中执行 SELECT语句时候，找到确保是事务开始之前就存在的或者该事务创建或修改的行，以及事务开始之前未删除的或确实未删除的行<br>（不理解的多读几次）</p><ol start="2"><li>INSERT 操作，为新插入的每一行都保存当前的数据库系统版本号作为行的创建时间版本号</li></ol><p>3，DELETE 操作，为每一行删除的记录保存当前的系统版本号作为删除时间</p><p>4.UPDATE 操作，首先插入一条新的记录，参照 INSERT操作，新的行中的创建时间记录为当前的系统版本号，对于旧的那条记录，<br>存储当前的系统版本号到旧的记录中的删除时间字段中。</p><p>这样的设计是的大多数的读操作都可以不加锁，使得并发性能很好，同时也符合度的标准。</p><p>注意 MVCC 只与REPEATABLE READ和READ COMMITTED两个隔离级别下工作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，数据库中并发的概念很简单。举个简单的例子，当两个进程在同一时刻对同一个数据表进行操作，这种情形就是并发。&lt;br&gt;并发会带来什么问题呢？最显而易见的就是数据的不一致性，导致很严重的数据错误，业务受损。&lt;br&gt;MySQL 作为成熟的数据库软件，有成熟的并发控制，下面根据《
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://scau009.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://scau009.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://scau009.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>leetcode3 无重复字符的最长子串</title>
    <link href="https://scau009.github.io/2020/03/09/leetcode3/"/>
    <id>https://scau009.github.io/2020/03/09/leetcode3/</id>
    <published>2020-03-09T13:01:49.000Z</published>
    <updated>2020-03-09T13:04:25.330Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"abcabcbb"</span></span><br><span class="line">输出: <span class="number">3</span> </span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"abc"</span>，所以其长度为 <span class="number">3</span>。</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"bbbbb"</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"b"</span>，所以其长度为 <span class="number">1</span>。</span><br></pre></td></tr></table></figure><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"pwwkew"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"wke"</span>，所以其长度为 <span class="number">3</span>。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">"pwke"</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">lengthOfLongestSubstring</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($s))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $s_array = str_split($s);</span><br><span class="line">        $max = <span class="number">1</span>;</span><br><span class="line">        $map = [];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($s_array);$i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>($j = $i;$j&lt;count($s_array);$j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">empty</span>($map[$s_array[$j]]))&#123;</span><br><span class="line">                    $max = $max &gt; count($map) ? $max : count($map);</span><br><span class="line">                    $map = [];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $map[$s_array[$j]] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>($j &gt;= count($s_array))</span><br><span class="line">            &#123;</span><br><span class="line">                $max = $max &gt; count($map) ? $max : count($map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;
&lt;h3 id=&quot;示例-1&quot;&gt;&lt;a href=&quot;#示例-1&quot; class=&quot;headerlink&quot; title=&quot;示例 1:&quot;&gt;&lt;/a&gt;示例 1:&lt;/h3&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://scau009.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://scau009.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-2 两数相加</title>
    <link href="https://scau009.github.io/2020/03/04/leetcode2/"/>
    <id>https://scau009.github.io/2020/03/04/leetcode2/</id>
    <published>2020-03-04T15:09:52.000Z</published>
    <updated>2020-03-09T13:02:23.907Z</updated>
    
    <content type="html"><![CDATA[<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 &#x3D; 807</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     public $val = 0;</span></span><br><span class="line"><span class="comment"> *     public $next = null;</span></span><br><span class="line"><span class="comment"> *     function __construct($val) &#123; $this-&gt;val = $val; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $l1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ListNode $l2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addTwoNumbers</span><span class="params">($l1, $l2)</span> </span>&#123;</span><br><span class="line">        $node1 = $l1;</span><br><span class="line">        $node2 = $l2;</span><br><span class="line">        $listHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        $listPointer = $listHead;</span><br><span class="line">        <span class="keyword">while</span>($node1 &amp;&amp; $node2)</span><br><span class="line">        &#123;</span><br><span class="line">            $flag = <span class="keyword">true</span>;</span><br><span class="line">            $sum = $node1-&gt;val + $node2-&gt;val;</span><br><span class="line">            <span class="keyword">if</span>($sum &gt;= <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                $listPointer-&gt;val = intval($sum%<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">if</span>($node1-&gt;next)</span><br><span class="line">                &#123;</span><br><span class="line">                    $node1-&gt;next-&gt;val += <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>($node2-&gt;next)&#123;</span><br><span class="line">                    $node2-&gt;next-&gt;val += <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $flag = <span class="keyword">false</span>;</span><br><span class="line">                    $listPointer-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">                    $listPointer = $listPointer-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $listPointer-&gt;val = $sum;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            $node1 = $node1-&gt;next;</span><br><span class="line">            $node2 = $node2-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>($node1 &amp;&amp; $node2 &amp;&amp; $flag)</span><br><span class="line">            &#123;</span><br><span class="line">                $listPointer-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                $listPointer = $listPointer-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($node1 || $node2)&#123;</span><br><span class="line">            $listPointer-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            $listPointer = $listPointer-&gt;next;</span><br><span class="line">            $node = $node1 ? $node1 : $node2;</span><br><span class="line">            <span class="keyword">while</span>($node)</span><br><span class="line">            &#123;</span><br><span class="line">                $flag = <span class="keyword">true</span>;</span><br><span class="line">                $sum = $node-&gt;val + $listPointer-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>($sum &gt;= <span class="number">10</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    $listPointer-&gt;val = intval($sum%<span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">if</span>($node-&gt;next)</span><br><span class="line">                    &#123;</span><br><span class="line">                        $node-&gt;next-&gt;val += <span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $flag = <span class="keyword">false</span>;</span><br><span class="line">                        $listPointer-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">                        $listPointer = $listPointer-&gt;next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $listPointer-&gt;val = $sum;</span><br><span class="line">                &#125;</span><br><span class="line">                $node = $node-&gt;next;</span><br><span class="line">                <span class="keyword">if</span>($node &amp;&amp; $flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    $listPointer-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                    $listPointer = $listPointer-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> $listHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;br&gt;您可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://scau009.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://scau009.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
